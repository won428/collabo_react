import { useEffect, useState } from "react";
import { Button, ButtonGroup, Card, Col, Container, Row } from "react-bootstrap";
import { API_BASE_URL } from "../config/config";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
/*
step 01
상품 목록을 상품 아이디가 역순으로 들어가있는 리스트형태의 데이터를 받아 읽어서 화면에 전체를 보여줍니다.
하나의 행에 3개의 열(Row)씩 보여줍니다.
필드 검색과 페이징 기능은 구현하지 않았습니다.

step 02
사용자 정보가 'ADMIN'이면, 등록/수정/삭제 버튼이 보이게 코딩
삭제 버튼에 대한 기능 구현
*/



function App({user}){
	// 스프링에서 넘겨 받은 상품 목록
	const [product, setProduct] = useState([]);
	
	// 스프링 부트에 "상품 목록"을 요청하기
	useEffect(()=>{
		const url = `${API_BASE_URL}/product/list`
		axios
			.get(url, {})
			.then((response)=>{
				console.log('응답 받은 데이터')
				console.log(response.data)
				setProduct(response.data);
			})
			.catch((error)=>{
				console.log(error)
			});
	},[]);

	const navigate = useNavigate();
	// 이 함수는 관리자 모드일때 보여주는 '수정'과 '삭제'를 위한 버튼을 생성해주는 함수입니다.
	const makeAdminButton = (item, user, navigate) =>{
		if(user?.role !== 'ADMIN'){
			return null;
		}
 
		return(
			<div className="d-flex justify-content-center">
				<Button 
					variant="warning"
					size="sm"
					className="mb-2"
					onClick={(event)=>{
						event.stopPropagation();
						alert('수정');
					}}
				>수정
				</Button>
				&nbsp;
				<Button 
					variant="danger"
					className="mb-2"
					size="sm"
					onClick={async (event)=>{
						event.stopPropagation();
						const isDelete = window.confirm(`${item.name} 상품을 삭제 하시겠습니까?`);
						
						if(isDelete === false){
						alert(`${item.name} 상품 삭제를 취소하셨습니다.`);
						return;
						}
						// 주의) 상품을 삭제하려면 반드시 primary key인 상품의 아이디를 넘겨 주어야 합니다.	
						try{ // 상품을 삭제 후 다시 상품 목록 페이지를 보여줍니다.
							await axios.delete(`${API_BASE_URL}/product/delete/${item.id}`);
							
							alert(`${item.name} 상품이 삭제 되었습니다.`);
							navigate('/product/list')
						}
						catch(error){
							console.log(error);
							alert(`상품 삭제 실패 : ${error.response?.data || error.message}`)
						};
						
					}}
				>삭제
				</Button>
			</div>
		);
	};


	return(
			<Container className="my-4">
				<h1 className="my-4">상품 목록 페이지</h1>
				<Link to={`/product/insert `}>
				 {user?.role === 'ADMIN' && (
					<Button variant="primary" className="m-3">
						상품 등록
					</Button>
				 )}
				</Link>
				
				{/* 필드 검색 영역 */}
				
				{/* 자료 보여주는 영역 */}
				<Row>
					{/* products는 상품 배열, item은 상품 1개를 의미 */}
					{product.map((item)=>(
						<Col key={item.id} md={4} className="mb-4">
							<Card className="h-100" style={{cursor:'pointer'}}>
								<Card.Img
									variant=""
									src = {`${API_BASE_URL}/images/${item.image}`}
									alt = {item.name}
									style={{width: '100%', height: '200px'}}
								/>
								<Card.Body>
									{/* borderCollapse : 각 셀의 테두리를 합칠 것인지, 별개로 보여 줄지를 설정하는 속성 */}
									<table style={{width:'100%', borderCollapse:'collapse', border:'none'}}>
										<tr>
											<td style={{width:'70%', padding: '4px', border:'none'}}>
												<Card.Title>{item.name}({item.id})</Card.Title>
											</td>	
											{/* textAlign: 수평 정렬 방식, verticalAlign: 수직 자동 정렬 방식 지정 */}
											{/* rowspan 속성은 행 방향으로 병합시 사용 반대로는 colspan이 있음 */}
											<td rowSpan={2} style={{padding: '4px', border:'none', textAlign:'center', verticalAlign:'middle'}}>
												{makeAdminButton(item, user, navigate)}
											</td>
										</tr>
										<tr>
											<td style={{padding: '4px', border:'none'}}>
												<Card.Text>가격 : {item.price.toLocaleString()}원</Card.Text>
											</td>	
										</tr>
									</table>
									
								</Card.Body>
							</Card>
						</Col>
					))}
				</Row>
				{/* 페이징 처리 영역 */}
			</Container>
			
		);
}

export default App;